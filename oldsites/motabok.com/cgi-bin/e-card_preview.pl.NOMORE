#!/usr/bin/perl -T -W
#
# e-card_preview.pl
#
# Author:  Rodney Beede
#
# Version:  2009-02-25
#
# Copyright/License:
#
#    © 2009 Rodney Beede
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Written for the Norman Oklahoma Stake of The Church of Jesus Christ of Latter-day Saints
#
# Rendors a preview of the e-card
#
#

BEGIN {
	use File::Basename;

	my $cgilib = dirname($0) . "/../cgi-lib";

	push @INC, $cgilib; 
}


require 5.008;

use strict;
use CGI;
use Email::Valid;
#	DEBUG ONLY, DO DISABLE use CGI::Carp qw(fatalsToBrowser);


use constant MESSAGE_MAX_LENGTH => 1000;

use constant MESSAGE_SUBJECT => "Mormon Tabernacle Choir performance invitation";


# Where this script is located
use File::Basename;
my $SCRIPT_DIRECTORY = dirname($0);  # Perl always fills in $0 for us if script is a real file :)



main();


sub main {
	my $cgiQuery = new CGI;


	# DON'T FORGET TO htmlEntityEncode() EVERYTHING TO AVOID XSS ATTACKS
	my $fromAddress = $cgiQuery->param("from address");
	my @toAddresses = split(/\n/, $cgiQuery->param("to addresses"));  # \n separated
	my $personalMessage = $cgiQuery->param("personal message");

	# Is personal message too long?
	if(length($personalMessage) > MESSAGE_MAX_LENGTH) {
                # User was warned on the form so just truncate it
                $personalMessage = substr($personalMessage, 0, MESSAGE_MAX_LENGTH);
        }


	# Make the personal message html safe (protect against XSS)
	$personalMessage = htmlEntityEncode($personalMessage);

	# Validate the e-mail addresses look valid
	#	REMEMBER THEY ARE NOT SAFE FOR HTML (XSS ATTACKS)
	validateEmail($fromAddress, "From");

	foreach my $toAddress (@toAddresses) {
		$toAddress =~ s/^\s+|\s+$//g;  # Incase \r or other trailing whitespace

		if("" eq $toAddress) {
			next;
		}

		validateEmail($toAddress, "To");
	}


	# Make some HTML safe forms of the e-mail addresses
	my $htmlFromAddress = htmlEntityEncode($fromAddress);
	my $htmlToAddresses = htmlEntityEncode(join("\n", @toAddresses));


	# Form the e-mail content
	my $mergedContent = getMessageContentTemplate();
	$mergedContent =~ s/INSERT-FROM-ADDRESS/$htmlFromAddress/g;
	$mergedContent =~ s/INSERT-IP-ADDRESS/$ENV{"REMOTE_ADDR"}/g;
	$mergedContent =~ s/INSERT-PERSONAL-MESSAGE/$personalMessage/g;


	# Adjust any images to point from internal e-mail parts to the real web server for the preview
	$mergedContent =~ s/cid:/\/images\/e-card\//g;


	# Insert a form at the bottom to allow approving the preview
	my $previewFormHtml = qq!
		<hr>
		<form method="post" action="/cgi-bin/e-card.pl">
			<input type="hidden" name="from address" value="$htmlFromAddress">
			<textarea style="display: none;"  name="to addresses">$htmlToAddresses</textarea>
			<textarea style="display: none;" name="personal message">$personalMessage</textarea>

			<input type="submit" value="Send"> &nbsp; <button onclick="history.go(-1);">Change</button>
		</form>
	!;

	# Insert the form at the end
	$mergedContent = substr($mergedContent, 0, index($mergedContent, "</body>"))
			. $previewFormHtml
			. substr($mergedContent, index($mergedContent, "</body>"));

	# Render the page
	print "Content-Type: text/html; charset=UTF-8\n";
	print "\n";
	print $mergedContent;
}



# Still not safe for any open or system commands, just HTML
sub htmlEntityEncode {
	my $tainted = shift;

	my $htmlEntityEncoded = "";

	# Go through each character and encode it (valid ascii only)
	my @charAsciiCodes = unpack("C*", $tainted);

	foreach my $currAscii (@charAsciiCodes) {
		if(($currAscii >= 32 && $currAscii <= 126) || $currAscii == 10) {
			$htmlEntityEncoded .= "&#" . $currAscii . ";";
		}
	}

	return $htmlEntityEncoded;
}


sub validateEmail {
	my $emailAddress = shift;
	my $addressType = shift;  # From / To / etc.

	unless(Email::Valid->address($emailAddress)) {
		print "Content-Type: text/html; charset=UTF-8\n";
		print "\n";

		my $htmlEncodedValue = htmlEntityEncode($emailAddress);

		print "$addressType e-mail address '" . $htmlEncodedValue . "' was not valid.  Please go back and correct it.";
		exit(1);
	}
}


# A technical error has goofed things up
#	We could try e-mailing the admin, but most likely e-mail isn't working
sub response_error {
	printResponseHeader();

	print "We're sorry, but due to a server error your message was not sent.  Please try again later.\n";
	print "\n";
	print "You may also try contacting the web site administrator at " . $ENV{"SERVER_ADMIN"} . "\n";

	exit(2);
}


sub printResponseHeader {
        print "Content-Type: text/plain; charset=UTF-8\n";
        print "\n";
}


sub getMessageContentTemplate {
	# open the template
	#	never stored in cgi-bin to avoid malicious execution
	open(TEMPLATE_FH, "<", $SCRIPT_DIRECTORY . "/../e-card.template")
		or response_error();

	my $fileContents;

	{
		local $/=undef;
		$fileContents = <TEMPLATE_FH>;  # not very big so not too slow
	}

	close(TEMPLATE_FH);

	return $fileContents;
}

